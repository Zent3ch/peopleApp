{
  "_args": [
    [
      "plug",
      "C:\\Users\\Zenno\\dev\\userinfo"
    ]
  ],
  "_from": "plug@latest",
  "_id": "plug@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/plug",
  "_phantomChildren": {},
  "_requested": {
    "name": "plug",
    "raw": "plug",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/plug/-/plug-0.1.1.tgz",
  "_shasum": "24fb8cbdb5d322090f7931d2304b0cfaecf15d92",
  "_shrinkwrap": null,
  "_spec": "plug",
  "_where": "C:\\Users\\Zenno\\dev\\userinfo",
  "author": {
    "email": "damon.oehlman@sidelab.com",
    "name": "Damon Oehlman"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/plug/issues"
  },
  "contributors": [],
  "dependencies": {
    "debug": "*"
  },
  "description": "Simple plugin system with minimal dependencies",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "24fb8cbdb5d322090f7931d2304b0cfaecf15d92",
    "tarball": "https://registry.npmjs.org/plug/-/plug-0.1.1.tgz"
  },
  "engines": {
    "node": ">= 0.4.x < 0.9.0"
  },
  "homepage": "https://github.com/DamonOehlman/plug#readme",
  "main": "index.js",
  "maintainers": [
    {
      "email": "damon.oehlman@sidelab.com",
      "name": "damonoehlman"
    }
  ],
  "name": "plug",
  "optionalDependencies": {},
  "readme": "# plug - lightweight and simple plugin system\n\nPlug is a very simple plugin system for Node.js.  It has minimal dependencies and is should make loading plugins a very simple affair.\n\n## Design Principles\n\n- Plugins are node modules that export a `connect` and `drop` function.\n- Each `Plugger` manages a list of active plugins, which are unique by name.\n- In the event that a plugin with the same name as an existing plugin is loaded into a Plugger scope, the old plugin is __dropped__ before the new plugin is __connected__.\n\n## Installing\n\nThe simplest way to install plug is via npm:\n\n```\nnpm install plug\n```\n\n## Plugin Connection\n\nWhen a new plugin is found, the `connect` function for the plugin is called with arguments that were passed when a new `Plugger` instance was created.  This sounds a little confusing at first, but makes plug quite powerful.\n\nIn the following example, for instance, a Plugger is created taking a name and age argument:\n\n`examples/simple-loader.js`:\n\n```js\nvar path = require('path'),\n    plugger = require('plug').create('Bob', 36);\n\n// handle plugin connection\nplugger.on('connect', function(pluginName, pluginData, modulePath) {\n    console.log('loaded plugin \"' + pluginName + '\", with data: ', pluginData);\n});\n\nplugger.find(path.resolve(__dirname, 'plugins/a'));\n```\n\nWhen plugins are later connected, these arguments are passed through to the plugin's connect function along with a callback.  The callback is responsible for returning _pluginData_ to the plugger, and all of this information is passed through when a `connect` event is emitted:\n\n`plugins/a/first.js`:\n\n```\nexports.connect = function(name, age, callback) {\n\tconsole.log('I belong to ' + name);\n\tcallback({\n\t\tsport: 'Fishing'\n\t});\n});\n```\n\nRunning, the above example yields the following output:\n\n```\nI belong to Bob\nloaded plugin \"first\", with data:  { sport: 'Fishing' }\n```\n\n## Plugin Drop (or Disconnection)\n\nTo be completed.\n\n### Using Drop Actions\n\nTo be completed.\n\n## Other Node Plugin Systems\n\n- [haba](https://github.com/crcn/haba)\n- [broadway](https://github.com/flatiron/broadway)",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/DamonOehlman/plug.git"
  },
  "tags": [
    "plugin"
  ],
  "version": "0.1.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "pkgid": "plug@0.1.1",
      "required": {
        "node": ">= 0.4.x < 0.9.0"
      }
    },
    {
      "code": "ENOTSUP",
      "pkgid": "plug@0.1.1",
      "required": {
        "node": ">= 0.4.x < 0.9.0"
      }
    }
  ]
}
